制限事項
---------------------------------

* 構造体型の配列を添字なしに参照した場合には対応していない。

ex.)
      program main
        type t
                integer a
        end type
        type(t), dimension(10) :: s
        integer, dimension(10) :: i

        s%a = i
      end

* EQUIVALENCE文で宣言された変数に対して、異なるDATA文の記述を許している。

ex.)
      equivalence (a, b)
      data a /1/
      data b /2/

* 文字列定数の部分文字列には未対応。

ex.)
      print *, "abc"(1:2)

* 'D' と種別を同時に使用した実数定数表現に対応していない。

ex.)
      1.0D10_8

* 旧形式の DO WHILE ループ構文には対応していない。

ex.)
       DO label while ( logical-expression )
       :
label  :

* intrinsic 関数と同名のユーザ定義副プログラムに対応していない。

ex.)
      subroutine a()
        call vefiry(1, 2, 3) ! これはユーザ定義 subroutine
      end subroutine
      program main
        i = verify("abc", "b") ! これは intrinsic 関数
      end program

* ALLOCATE文、DEALLOCATE文において配列の上限・下限が同一の文の中で依存関係を持っている場合のエラーチェックをしていない。

ex.)
      allocate(a(size(b)), b(size(a)))

* 文番号が列挙された割り当て型GOTO文はSELECT CASE文と通常のGOTO文へ変換されるが、文番号が列挙されていない割り当て型GOTO文には対応していない。

ex.)
      goto jump (10,20) ... 対応している
      goto jump         ... 対応していない

* implicit 文の letter group の前後、(/) でなく、[/] を指定しても、error に
ならない。

ex.)
      implicit real [ah,o-z]

* MODULE 文を読み込む際に中間ファイル (.xmod) が作成される。

* INTERFACE文で定義された総称型の関数の型は、常にFnumericAllで表される。XcodeMLの仕様上、同一のシンボルについて異なる複数の型を表すことができない。

* INTERFACE文で定義された総称型関数に対しては式・代入における型チェックを行わない。

* INTERFACE文のブロックにおいて、FUNCTION/SUBROUTINE/MODULE PROCEDURE以外を記述できてしまう。

* 文関数はXcodeMLの仕様上インライン展開されるが、文関数の型を変換するためにINT/REAL/CMPLXなどの型変換を行う関数を伴って展開される。

* MODULEを前方参照することはできない。

* FUNCTION/SUBROUTINE/INTERFACE を前方参照した場合、暗黙の型として扱う。

* FUNCTIONを前方参照する関数呼出しにおいて、関数呼出しの結果としてLOGICAL値が期待されている場合、強制的に関数をLOGICAL型として扱う。

* 副プログラムの呼出しについて、引数の個数や型のエラーチェックを行わない。

* DOUBLE PRECISION は REAL(8)、DOUBLE COMPLEX は COMPLEX(8) の型に変換される。

* 配列の参照において、配列の添字に配列式を使用することはできない。

* CASE文の場合式の型と範囲の重複をチェックしない。

* CASE文を飛び先文とするGOTO文が許される。

* WHERE文の条件式に論理配列式以外が記述できる。

ex.)
        where .TRUE. .and. .TRUE.
            A = 1
        end where

* WHERE文のブロックに代入文以外が記述できる。

ex.)
        where A > 1
            CALL SUBROUTINE()
        end where

* WHERE文のブロックの代入文左辺の形状と、条件式の論理配列式の形状の一致をチェックしない。

ex.)
        logical :: l(1:3)
        integer :: I(1:2,1:2)

        where l .and .TRUE.
            I = I + 1
        end where

* CASE文, DO文, IF文の構文名の一致のチェックを行わない。

ex.)
       label1: do expression
          if (i == 3) cycle label2
          sum = sum + i
          if (sum > 100) exit label2
          continue
        end do label1

* 引数で戻り値の型のkindを指定できるintrinsic関数AINT、CHAR、INT、REAL、CMPLXにkindを指定しても、出力されるXcodeMLには反映されず、kindが無指定の型が戻り値の型になる。

* 引数が複数個あり、各引数の形状に指定がないintrinsic関数CMPLX、MAX、MIN、MOD、SCAN、VERIFY、IAND、IBITS、IBSET、IOR、ISHFT、SCALE、MERGE、INDEX、SIGNは引数同士の形状を比較しない。

* 引数が複数個あり、各引数と戻り値の形状に指定がないintrinsic関数CMPLX、MAX、MIN、MOD、SCAN、VERIFY、IAND、IBITS、IBSET、IOR、ISHFT、SCALE、MERGEのXcodeMLに出力される戻り値の型及び形状は第1引数のものとなる。

* intrinsic関数MATMULとDOT_PRODUCTは引数の形状をチェックしない。

* intrinsic関数MATMULの戻り値の型は第2引数の型としてXcodeMLに出力される。

* intrinsic関数DOT_PRODUCTの戻り値の型は第1引数の型としてXcodeMLに出力される。

* 固定形式の場合、最大カラムは 72 となり、それを拡張するオプションは用意されていない。

* 代入文において型の整合性チェックを厳密に行っていない。

